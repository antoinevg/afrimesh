#!/bin/sh /etc/rc.common
# Copyright (C) 2006 OpenWrt.org

START=50 
DEST=
DEFAULT=$DEST/etc/default/asterisk
OPTIONS=""


is_false() {
    [ $1 != "true" ] && [ $1 != "on" ] && [ $1 != "1" ] && [ $1 != "yes" ]
}


append_sip_parm() {
  local section="$1"
  local option="$2"
  local default="$3"
  local key="$4"
  if [ -z "$key" ] ; then 
      key="$option"
  fi
  local value
  config_get value "$section" "$option"
  if [ -z "$value" ] ; then
      value="$default"
  fi
  if [ ! -z "$key" ] && [ ! -z "$value" ] ; then
    append sipconf "\n$key=$value"
  else
    echo "UNKNOWN: $key . $value"
  fi
}


append_sip_entry() {
  local cfg="$1"
  append sipconf "\n\n[$cfg]"
  append_sip_parm "$cfg" "context"     "default"
  append_sip_parm "$cfg" "type"        "peer"
  append_sip_parm "$cfg" "host"        "10.0.0.1"
  append_sip_parm "$cfg" "port"        "5060"
  append_sip_parm "$cfg" "username"    ""
  append_sip_parm "$cfg" "username"    ""         "authuser"
  append_sip_parm "$cfg" "username"    ""         "fromuser"
  append_sip_parm "$cfg" "secret"      ""
  append_sip_parm "$cfg" "host"        ""         "fromdomain"
  append_sip_parm "$cfg" "nat"         "no"
  append_sip_parm "$cfg" "qualify"     "3600"
  append_sip_parm "$cfg" "dtmfmode"    "rfc2833"
  append_sip_parm "$cfg" "bindaddr"    "0.0.0.0"
  append_sip_parm "$cfg" "bindport"    "5060"
  append_sip_parm "$cfg" "insecure"    ""
  #append_sip_parm "$cfg" "callerid"    "server"
  #append_sip_parm "$cfg" "canreinvite" "no"
  #append_sip_parm "$cfg" "allowguest"  "yes"
  append sipconf "\ndisallow=all"
  append sipconf "\nallow=$(uci get asterisk.@sipgeneral[0].allow)"
  
}


configure_sip() {
  # build & write out sip.conf  -  TODO don't write sip.conf
  cat > /etc/asterisk/sip.conf << EOF
[general]
context=default
;allowguest=yes; Allow or reject guest calls (default is yes)
;allowoverlap=no
;bindport=5060
;bindaddr=0.0.0.0
srvlookup=no
;register => 7001:mysecret@192.168.20.230/ip04
register => 7001:mysecret@192.168.20.230/7001
#include "potato.sip.conf"
EOF
  sipconf=""
  config_foreach append_sip_entry sip
  echo -e "$sipconf" >> /etc/asterisk/potato.sip.conf

  # build & write out extensions.conf  -  TODO don't write extensions.conf
  extconf=""
  cat > /etc/asterisk/extensions.conf << EOF
[general]
static=yes
writeprotect=no
clearglobalvars=no
[globals]
CONSOLE=Console/dsp; Console interface for demo
;IAXINFO=guest; IAXtel username/password
;TRUNK=Zap/g2; Trunk interface
;TRUNK=SIP/ip04; Trunk interface
;TRUNKMSD=1; MSD digits to strip (usually 1 or 0)
[local]
;ignorepat => 9
include => default
#include "potato.extensions.conf"
EOF
  cat > /etc/asterisk/potato.extensions.conf << EOF
[default]
exten => 7001,1,Dial(MP/1) ; answer incoming calls
exten => _XXXX,1,Dial(SIP/\${EXTEN}@ip04,30,r)  ; route 4 digit extensions to IP04
exten => _0.,1,Dial(SIP/\${EXTEN}@ip04,30,r)    ; trunk everything after '0' through the IP04
EOF

  # build & write out users.conf - TODO don't write users.conf
  cat > /etc/asterisk/users.conf << EOF
#include "potato.users.conf"
EOF
  cat > /etc/asterisk/potato.users.conf << EOF
;[general]
;fullname = Plink
;userbase = 7000
;hassip = yes
;hasiax = yes
;hasmanager = no
EOF
}


configure_asterisk() {
  # load asterisk configuration from UCI
  config_load afrimesh
  config_get sip_enable "voip" "sip"
  config_get iax_enable "voip" "iax"

  # load asterisk configuration from UCI
  config_load asterisk

  # clear any existing sip configuration 
  echo > /etc/asterisk/potato.sip.conf
  echo > /etc/asterisk/potato.extensions.conf
  echo > /etc/asterisk/potato.users.conf

  # configure sip trunks
  if is_false $sip_enable ; then
      return
  else
      configure_sip
  fi
  
}


restart() {
  # kill asterisk
  [ -f $DEST/var/run/asterisk.pid ] && kill $(cat $DEST/var/run/asterisk.pid) >/dev/null 2>&1
  sleep 2

  # reconfigure asterisk
  configure_asterisk

  # restart asterisk
  /usr/sbin/asterisk -f 2>&1 > /dev/null &
}


reload() {
  # reconfigure asterisk
  configure_asterisk

  # reload dialplan
  /usr/sbin/asterisk -rx 'reload' > /dev/null

  # it takes asterisk a few moments to update peer status
  sleep 4
}


start() {
  # create asterisk directories
  [ -f $DEFAULT ] && . $DEFAULT
  [ -d $DEST/var/run ] || mkdir -p $DEST/var/run
  [ -d $DEST/var/log/asterisk ] || mkdir -p $DEST/var/log/asterisk
  [ -d $DEST/var/spool/asterisk ] || mkdir -p $DEST/var/spool/asterisk
  [ -d /var/spool/asterisk ] || mkdir -p /var/spool/asterisk
  [ -h $DEST/usr/lib/asterisk/astdb ] || ln -sf /var/spool/asterisk/astdb $DEST/usr/lib/asterisk/astdb

  # create device nodes if needed
  [ ! -c /dev/8250mp ] && mknod -m 666 /dev/8250mp c 33 0
  [ ! -c /dev/mp     ] && mknod -m 666 /dev/mp     c 34 0
  
  # load kernel modules if needed
  [ $(cut -d ' ' -f 1 /proc/modules | grep -c "^serial_core") -eq 0 ] && insmod /usr/lib/serial_core.ko
  [ $(cut -d ' ' -f 1 /proc/modules | grep -c "^8250mp")      -eq 0 ] && insmod /usr/lib/8250mp.ko
  [ $(cut -d ' ' -f 1 /proc/modules | grep -c "^mp")          -eq 0 ] && insmod /usr/lib/mp.ko
  sleep 1

  # generate the includes for asterisk configuration
  configure_asterisk

  # start up asterisk
  /usr/sbin/asterisk -f 2>&1 > /dev/null &
}


stop() {
  [ -f $DEST/var/run/asterisk.pid ] && kill $(cat $DEST/var/run/asterisk.pid) >/dev/null 2>&1
}

